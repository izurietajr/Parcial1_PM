#+TITLE: Primer parcial INF 324

| Nombre: | Jesus Rodolfo Izurieta Veliz |
| CI:     |                      9860616 |

* Enunciado
1. Usted ha definido una tabla IDENTIFICADOR en la base de datos ACADEMICO, la
   cual contiene información de CI, Nombre completo, fecha de nacimiento, lugar
   de residencia (codigo) (El dato suyo es inicial, aunque el numero de carnet
   de sus amigos sean menores); otra tabla denominada USUARIO con los datos de
   CI y clave; realice lo siguiente: Genere un login por cada CI, ingresando a
   una pantalla de bienvenida (cuya cabecera indicara el nombre de su pagina,
   con una foto de usted con CSS) y un color por defecto (PHP), incluya un INPUT
   de tipo select que tenga al menos tres colores.

2. Con la Base de datos anterior, adicione una tabla de notas por materia y
   cuente la cantidad de aprobados por departamento de manera que solo obtenga
   una sola fila de resultados (con codigo PHP, con codigo SQL) Una vez
   desarrollado, en un archivo Word o PDF indique el link por cada pregunta.
  
* Instrucciones
** Docker
Para iniciar el proyecto con docker, se necesita tener instalado docker:

[[https://docs.docker.com/engine/install/][Instalación de docker]]

Y docker-compose:

[[https://docs.docker.com/compose/install/][Instalación de docker-compose]]

Después de esto, el servidor se inicia con el comando =docker-compose up= y el
proyecto estará corriendo en el puerto 8000.

** XAMPP
En caso de no instalar docker, el proyecto puede inicializarse usando XAMPP,
para lo cual, el directorio =parcial1= tendrá que copiarse a =htdocs=.

* INF 324 - Informe de desarrollo primer parcial
#+export_file_name: Informe de desarrollo.pdf
#+include: ~/org/templates/tarea.org
#+latex_header: \newcommand{\hleft}{Programación Multimedial}
#+latex_header: \newcommand{\hright}{INF 324}
#+latex_header: \setlength{\parindent}{0cm}
Para este proyecto usaremos la biblioteca codeigniter para desarrollar en php,
para la base de datos usaremos mariadb, un motor de base de datos open source
basado en mysql. El proyecto estará organizado en contenedores docker, para
facilitar su distribución y replicar su funcionamiento sin tener que lidiar con
problemas de versiones ni configuraciones extra para el funcionamiento del
proyecto.

** Configuración del proyecto
La estructura del proyecto estará definida por el archivo =docker-compose.yml=,
en el que indicaremos las imágenes de docker que se usarán para el proyecto, en
este caso, usaremos contenedores de codeigniter y mariadb.

#+begin_src yml
version: '2'
services:
  myapp:
    image: 'docker.io/bitnami/codeigniter:3-debian-10'
    ports:
      - '8000:8000'
    volumes:
      - '.:/app'
    depends_on:
      - mariadb
  mariadb:
    image: 'docker.io/bitnami/mariadb:10.3-debian-10'
    ports:
      - '3306:3306'
    volumes:
      - './mysql:/bitnami/mariadb'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
#+end_src

** Base de datos
Después de inicializar el proyecto con docker, necesitaremos crear la base de
datos, nos conectamos al contenedor de mariadb con el comando:

=docker exec -it 65bdcb8d72f1 bash=

Donde =65bdcb8d72f1= es el código del contenedor, que puede obtenerse con el
comando =docker ps= cuando el proyecto está ejecutándose.

*** Creación de tablas
En la línea de comandos, iniciamos una sesión en mysql con el comando:

=mysql -u root -p=

Se nos pedirá una contraseña, que será la que tenemos configurada en el archivo
=docker-compose.yml= o en su defecto, nos permitirá ingresar sin una contraseña
la primera vez.

Creamos un usuario con el comando

=GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost' IDENTIFIED BY 'password';=

Poniendo el nombre del usuario en lugar de "username" y la contraseña en lugar
de "password". En este caso creamos el usuario admin.

Ahora saldremos de mysql con =\q=, y volveremos a ingresar con el usuario y
contraseña recientemente creados.

=mysql -u admin -p=

Ahora crearemos la base de datos y la seleccionaremos para crear las tablas en
ella.

=CREATE DATABASE academico;=
=USE academico;=

ahora crearemos las siguientes tablas:

*Tabla USUARIO*

| Campo    | Tipo de dato | Longitud | PK | Descripción          |
|----------+--------------+----------+----+----------------------|
| pk       | int          |          | si | Llave primaria       |
| dni      | int          |          |    | CI del usuario       |
| password | varchar      |       40 |    | Clave para ingresar  |
| photo    | varchar      |      200 |    | Url de la fotografía |

Con la consulta:

#+begin_src sql
CREATE TABLE usuario
(
    pk int unsigned not null auto_increment,
    dni varchar(20) not null,
    password varchar(40) not null,
    photo varchar(200),
    primary key (pk)
);
#+end_src

*Tabla IDENTIFICADOR:*

| Campo      | Tipo de dato | Longitud | PK | Descripción                    |
|------------+--------------+----------+----+--------------------------------|
| pk         | int          |          | si | Llave primaria                 |
| user_pk    | int          |          |    | Llave foránea de usuario       |
| dni        | int          |       20 |    | CI del usuario                 |
| first_name | varchar      |      100 |    | Nombres                        |
| last_name  | varchar      |      100 |    | Apellidos                      |
| birth_date | date         |          |    | Fecha de nacimiento            |
| residence  | varchar      |       10 |    | Código del lugar de residencia |

Con la consulta:

#+begin_src sql
CREATE TABLE identificador
(
    pk int unsigned not null auto_increment primary key,
    user_pk int unsigned,
    dni varchar(20) not null,
    first_name varchar(100),
    last_name varchar(100) not null,
    birth_date date,
    residence varchar(10),
    foreign key (user_pk) REFERENCES usuario(pk)
);
#+end_src

*Tabla NOTAS*

| Campo   | Tipo de dato | Longitud | PK | Descripción              |
|---------+--------------+----------+----+--------------------------|
| pk      | int          |          | si | Llave primaria           |
| user_pk | int          |          |    | Llave foránea de usuario |
| matter  | varchar      |       50 |    | Materia                  |
| score   | int          |          |    | Calificación             |

Con la consulta:

#+begin_src sql
CREATE TABLE notas
(
    pk int unsigned not null auto_increment,
    user_pk int unsigned,
    dni varchar(20) not null,
    matter varchar(50),
    score int,
    primary key (pk),
    foreign key (user_pk) REFERENCES usuario(pk)
);
#+end_src

Podremos comprobar que las tablas se crearon con el comando =show tables;=, que
nos mostrará una lista de las tablas de nuestra base de datos.

** Desarrollo
El proyecto consta de dos secciones para resolver los dos problemas propuestos
en el enunciado, la página de perfil de usuario, que mostrará la foto del
usuario y la parte de notas, donde se mostrará el contenido de la tabla notas.

** Modelos
Codeigniter nos permite abstraer los datos de una base de datos y las acciones
que podemos realizar sobre ellas mediante modelos que definimos por cada tabla
de la base de datos.

**** Usuario
Definimos el modelo usuario

** Vistas
*** Inicio de sesión
Para el inicio de sesión se ingresa en la dirección raíz (/) y si no se tiene
una sesión iniciada, se mostrará el formulario de inicio de sesión. En caso de
tener una sesión, el usuario podrá acceder automáticamente a su página de
perfil, donde se mostrará su foto y la opción de cambiar el color de la página.

Para esto, empezaremos por definir los modelos que representarán a las tablas de
la base de datos.
